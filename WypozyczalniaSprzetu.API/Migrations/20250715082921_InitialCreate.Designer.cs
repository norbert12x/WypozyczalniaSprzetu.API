// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WypozyczalniaSprzetu.API.Data;

#nullable disable

namespace WypozyczalniaSprzetu.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250715082921_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WypozyczalniaSprzetu.API.Models.KategoriaSprzetu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("KategorieSprzetu");
                });

            modelBuilder.Entity("WypozyczalniaSprzetu.API.Models.Klient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataRejestracji")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Klienci");
                });

            modelBuilder.Entity("WypozyczalniaSprzetu.API.Models.Pracownik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("HasloHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rola")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pracownicy");
                });

            modelBuilder.Entity("WypozyczalniaSprzetu.API.Models.Rezerwacja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CenaCalkowita")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DataDo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataOd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataRezerwacji")
                        .HasColumnType("datetime2");

                    b.Property<int>("KlientId")
                        .HasColumnType("int");

                    b.Property<int>("SprzetId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KlientId");

                    b.HasIndex("SprzetId");

                    b.ToTable("Rezerwacje");
                });

            modelBuilder.Entity("WypozyczalniaSprzetu.API.Models.Sprzet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CenaZaDzien")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Dostepny")
                        .HasColumnType("bit");

                    b.Property<int>("KategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KategoriaId");

                    b.ToTable("Sprzety");
                });

            modelBuilder.Entity("WypozyczalniaSprzetu.API.Models.Zwrot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CzySpóźnione")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataZwrotu")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Kara")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RezerwacjaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RezerwacjaId")
                        .IsUnique();

                    b.ToTable("Zwroty");
                });

            modelBuilder.Entity("WypozyczalniaSprzetu.API.Models.Rezerwacja", b =>
                {
                    b.HasOne("WypozyczalniaSprzetu.API.Models.Klient", "Klient")
                        .WithMany("Rezerwacje")
                        .HasForeignKey("KlientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WypozyczalniaSprzetu.API.Models.Sprzet", "Sprzet")
                        .WithMany("Rezerwacje")
                        .HasForeignKey("SprzetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Klient");

                    b.Navigation("Sprzet");
                });

            modelBuilder.Entity("WypozyczalniaSprzetu.API.Models.Sprzet", b =>
                {
                    b.HasOne("WypozyczalniaSprzetu.API.Models.KategoriaSprzetu", "Kategoria")
                        .WithMany("Sprzety")
                        .HasForeignKey("KategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kategoria");
                });

            modelBuilder.Entity("WypozyczalniaSprzetu.API.Models.Zwrot", b =>
                {
                    b.HasOne("WypozyczalniaSprzetu.API.Models.Rezerwacja", "Rezerwacja")
                        .WithOne("Zwrot")
                        .HasForeignKey("WypozyczalniaSprzetu.API.Models.Zwrot", "RezerwacjaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rezerwacja");
                });

            modelBuilder.Entity("WypozyczalniaSprzetu.API.Models.KategoriaSprzetu", b =>
                {
                    b.Navigation("Sprzety");
                });

            modelBuilder.Entity("WypozyczalniaSprzetu.API.Models.Klient", b =>
                {
                    b.Navigation("Rezerwacje");
                });

            modelBuilder.Entity("WypozyczalniaSprzetu.API.Models.Rezerwacja", b =>
                {
                    b.Navigation("Zwrot")
                        .IsRequired();
                });

            modelBuilder.Entity("WypozyczalniaSprzetu.API.Models.Sprzet", b =>
                {
                    b.Navigation("Rezerwacje");
                });
#pragma warning restore 612, 618
        }
    }
}
